generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                      String     @id @default(cuid())
  name                    String?
  email                   String?    @unique
  emailVerified           DateTime?
  image                   String?
  pnwApiKey               String?
  allianceId              String?
  allianceRole            Int?       @default(0)
  pnwNationId             Int?       @unique
  pnwAlliancePositionId   Int?
  pnwAlliancePositionName String?
  pnwAllianceSeniority    Int?
  pnwLastActive           DateTime?
  pnwLastSynced           DateTime?
  pnwLeaderName           String?
  pnwNationName           String?
  pnwNumCities            Int?
  pnwSnapshot             Json?
  accounts                Account[]
  ownedAlliance           Alliance?  @relation("AllianceOwner")
  sessions                Session[]
  alliance                Alliance?  @relation("AllianceMembers", fields: [allianceId], references: [id])
  roles                   UserRole[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Alliance {
  id            String  @id @default(cuid())
  slug          String  @unique
  name          String
  whitelisted   Boolean @default(false)
  ownerId       String? @unique
  pnwAllianceId Int?    @unique
  modules       Json?
  // Discord bot configuration
  discordGuildId          String?
  discordRaidChannelId    String?
  discordGeneralChannelId String?
  discordBotEnabled       Boolean @default(false)
  discordSettings         Json?   // Additional Discord settings
  owner         User?   @relation("AllianceOwner", fields: [ownerId], references: [id])
  roles         Role[]
  members       User[]  @relation("AllianceMembers")
  wars          War[]
}

model Role {
  id          String     @id @default(cuid())
  name        String
  allianceId  String
  alliance    Alliance   @relation(fields: [allianceId], references: [id], onDelete: Cascade)
  assignments UserRole[]

  @@unique([name, allianceId])
}

model UserRole {
  id     String @id @default(cuid())
  userId String
  roleId String
  role   Role   @relation(fields: [roleId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, roleId])
}

model War {
  id             String     @id @default(cuid())
  pnwWarId       Int        @unique
  allianceId     String
  attackerId     Int
  defenderId     Int
  attackerName   String?
  defenderName   String?
  warType        String?
  groundControl  String?
  airSuperiority String?
  navalBlockade  String?
  winner         Int?
  turnEnds       DateTime?
  warStarted     DateTime
  warEnded       DateTime?
  isDefensive    Boolean
  isActive       Boolean    @default(true)
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt
  alliance       Alliance   @relation(fields: [allianceId], references: [id], onDelete: Cascade)
  alerts         WarAlert[]

  @@index([allianceId, isActive])
  @@index([pnwWarId])
}

model WarAlert {
  id        String   @id @default(cuid())
  warId     String
  alertType String
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())
  war       War      @relation(fields: [warId], references: [id], onDelete: Cascade)

  @@index([warId])
}
