generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  pnwApiKey     String?   @db.Text
  pnwNationId   Int?      @unique
  // persisted Politics & War snapshot fields
  pnwSnapshot   Json?
  pnwLastSynced DateTime?
  pnwLastActive DateTime?
  pnwNumCities  Int?
  pnwAlliancePositionId Int?
  pnwAlliancePositionName String?
  pnwAllianceSeniority Int?
  pnwNationName String?
  pnwLeaderName String?
  // alliance membership
  allianceId    String?
  allianceRole  Int?      @default(0) // 0=no alliance, 1=applicant,2=member,5=leader
  accounts      Account[]
  sessions      Session[]
  alliance      Alliance? @relation("AllianceMembers", fields: [allianceId], references: [id])
  // if a user owns an alliance
  ownedAlliance Alliance? @relation("AllianceOwner")
  roles         UserRole[]
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?   @db.Text
  access_token       String?   @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?   @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Alliance {
  id          String  @id @default(cuid())
  slug        String  @unique
  pnwAllianceId Int?  @unique
  name        String
  whitelisted Boolean @default(false)
  ownerId     String?  @unique
  owner       User?   @relation("AllianceOwner", fields: [ownerId], references: [id])
  members     User[]  @relation("AllianceMembers")
  roles       Role[]
}

model Role {
  id         String   @id @default(cuid())
  name       String
  allianceId String
  alliance   Alliance @relation(fields: [allianceId], references: [id], onDelete: Cascade)
  assignments UserRole[]

  @@unique([name, allianceId])
}

model UserRole {
  id     String @id @default(cuid())
  userId String
  roleId String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  role Role @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([userId, roleId])
}
